package org.wildfly.qa.distdiff2.phases.jardiff;

import org.wildfly.qa.distdiff2.artifacts.JarArtifact;
import org.wildfly.qa.distdiff2.configuration.DistDiff2Context;
import org.wildfly.qa.distdiff2.execution.DistDiff2Execution;
import org.wildfly.qa.distdiff2.jardiff.ClassDiff;
import org.wildfly.qa.distdiff2.jardiff.JarDiff;
import org.wildfly.qa.distdiff2.jardiff.JarDiffPhase;
import org.wildfly.qa.distdiff2.phase.MD5SumsPhase;
import org.wildfly.qa.distdiff2.tools.Tools;
import org.junit.Assert;
import org.junit.Test;

/**
 * @author Jan Martiska
 */
public class DecompilationTestCase {

    @Test
    public void doDecompilation() {
        DistDiff2Context.Builder builder = new DistDiff2Context.Builder();
        final DistDiff2Context ctx = builder
                .pathA("src/test/resources/decompilation/a")
                .pathB("src/test/resources/decompilation/b")
                .decompile(true)
                .decompileAll(false)
                .processPhase(MD5SumsPhase.class)
                .processPhase(JarDiffPhase.class)
                .build();

        DistDiff2Execution execution = new DistDiff2Execution(ctx);
        execution.execute();

        final JarArtifact artifact = (JarArtifact)ctx.getResults().findArtifactBySimpleName("thejar.jar");
        Assert.assertNotNull(artifact);
        final JarDiff jarDiff = artifact.getJarDiff();
        Assert.assertNotNull(jarDiff);
        Assert.assertFalse(jarDiff.isEmpty());
        final ClassDiff classDiff = jarDiff.getClassDiffs().get("MyClass");
        Assert.assertNotNull("ClassDiff for class MyClass should be generated", classDiff);
        final String codeDiff = classDiff.getHtml_sourceCodeDiff();
        Assert.assertNotNull("class MyClass should have been decompiled", codeDiff);
        if (Tools.getMajorJavaVersion() == 9) {
            Assert.assertTrue(codeDiff.contains("System.exit((int)66</span>"));
        } else {
            Assert.assertTrue(codeDiff.contains("System.exit(66</span>"));
        }

        final ClassDiff classDiff2 = jarDiff.getClassDiffs().get("ClassWithAPIChanges");
        final String codeDiff2 = classDiff2.getHtml_sourceCodeDiff();
        Assert.assertNull("ClassWithAPIChanges shouldn't have been decompiled", codeDiff2);

        // check that the comment generated automatically by decompiler was stripped out
        Assert.assertFalse("The autogenerated comment by CFR decompiler wasn't properly removed", codeDiff.contains("Decompiled with CFR"));
    }

    /**
     * with the --decompile-all flag, everything should be decompiled, even classes which changed their api
     */
    @Test
    public void doDecompilationWithAllFlag() {
        DistDiff2Context.Builder builder = new DistDiff2Context.Builder();
        final DistDiff2Context ctx = builder
                .pathA("src/test/resources/decompilation/_everything/a")
                .pathB("src/test/resources/decompilation/_everything/b")
                .decompile(true)
                .decompileAll(true)
                .processPhase(MD5SumsPhase.class)
                .processPhase(JarDiffPhase.class)
                .build();

        DistDiff2Execution execution = new DistDiff2Execution(ctx);
        execution.execute();

        final JarArtifact artifact = (JarArtifact)ctx.getResults().findArtifactBySimpleName("thejar.jar");
        Assert.assertNotNull(artifact);
        final JarDiff jarDiff = artifact.getJarDiff();
        Assert.assertNotNull(jarDiff);
        Assert.assertFalse(jarDiff.isEmpty());
        final ClassDiff classDiff = jarDiff.getClassDiffs().get("MyClass");
        Assert.assertNotNull(classDiff);
        if (Tools.getMajorJavaVersion() == 9) {
            Assert.assertTrue(classDiff.getHtml_sourceCodeDiff().contains("System.exit((int)66</span>"));
        } else {
            Assert.assertTrue(classDiff.getHtml_sourceCodeDiff().contains("System.exit(66</span>"));
        }

        // check that the comment generated automatically by decompiler was stripped out
        System.out.println(classDiff.getHtml_sourceCodeDiff());
    }

}
