package org.wildfly.qa.distdiff2.phases.permissions;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;

import java.io.File;
import java.nio.file.FileSystems;

import org.wildfly.qa.distdiff2.artifacts.Artifact;
import org.wildfly.qa.distdiff2.configuration.DistDiff2Context;
import org.wildfly.qa.distdiff2.excludelist.ExclusionPhase;
import org.wildfly.qa.distdiff2.execution.DistDiff2Execution;
import org.wildfly.qa.distdiff2.phase.MD5SumsPhase;
import org.wildfly.qa.distdiff2.phase.PermissionDiffPhase;
import org.wildfly.qa.distdiff2.results.Results;
import org.wildfly.qa.distdiff2.results.Status;

import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Tests for PermissionDiffPhase
 *
 * @author Martin Schvarcbacher
 */
public class PermissionsChangedTestCase {

    private static DistDiff2Context ctx;
    private static Results results;

    /**
     * Executes the dist-diff to get the results generated by the tool.
     */
    private static void prepareResults() {
        DistDiff2Context.Builder builder = new DistDiff2Context.Builder();
        ctx = builder
                .pathA("src/test/resources/permissions/a")
                .pathB("src/test/resources/permissions/b")
                .modifiedFilesFile("src/test/resources/permissions/expected-differences.txt")
                .permissionDiff(true)
                // Following line is here just because of this test: testFilePermissionsDifferentFilesEqualPermissions
                .processPhase(MD5SumsPhase.class)
                .processPhase(PermissionDiffPhase.class)
                // Following line is here just because of these tests:
                //   testFilePermissionsSameFilesDifferentPermissionsExcludedPermDiff
                //   testFilePermissionsDifferentFilesDifferentPermissionsExcludedPermDiff
                .processPhase(ExclusionPhase.class)
                .validate()
                .build();
        DistDiff2Execution execution = new DistDiff2Execution(ctx);
        execution.execute();
        results = ctx.getResults();
    }


    /**
     * Prepares all necessary files for the tests in this test case.
     */
    @BeforeClass
    public static void prepareTest() {
        //skip non-POSIX systems
        assumeTrue(FileSystems.getDefault().supportedFileAttributeViews().contains("posix"));

        // Folder A
        // testFilePermissionsEqualFilesEqualPermissions
        setPermissions(new File("src/test/resources/permissions/a/file1.txt"), true, true, false);
        // testFilePermissionsMissingAddedFiles
        setPermissions(new File("src/test/resources/permissions/a/file2.txt"), true, true, false);
        setPermissions(new File("src/test/resources/permissions/a/file4.txt"), true, true, false);
        // testFilePermissionsEqualFilesDifferentPermissions
        setPermissions(new File("src/test/resources/permissions/a/file5.txt"), true, true, false);
        setPermissions(new File("src/test/resources/permissions/a/file6.txt"), true, true, false);
        setPermissions(new File("src/test/resources/permissions/a/file7.txt"), true, true, false);
        // testFilePermissionsDifferentFilesEqualPermissions
        setPermissions(new File("src/test/resources/permissions/a/file8.txt"), true, true, false);
        // testFilePermissionsDifferentFilesDifferentPermissions
        setPermissions(new File("src/test/resources/permissions/a/file9.txt"), true, true, false);
        // testFilePermissionsSameFilesDifferentPermissionsExcludedPermDiff
        setPermissions(new File("src/test/resources/permissions/a/file10.txt"), true, true, false);
        setPermissions(new File("src/test/resources/permissions/a/file11.txt"), true, true, false);
        //   testFilePermissionsDifferentFilesDifferentPermissionsExcludedPermDiff
        setPermissions(new File("src/test/resources/permissions/a/file12.txt"), true, true, false);
        setPermissions(new File("src/test/resources/permissions/a/file13.txt"), true, true, false);

        // Folder B
        // testFilePermissionsEqualFilesEqualPermissions
        setPermissions(new File("src/test/resources/permissions/b/file1.txt"), true, true, false);
        // testFilePermissionsMissingAddedFiles
        setPermissions(new File("src/test/resources/permissions/b/file3.txt"), true, false, false);
        setPermissions(new File("src/test/resources/permissions/b/file4.txt"), true, true, true);
        // testFilePermissionsEqualFilesDifferentPermissions
        setPermissions(new File("src/test/resources/permissions/b/file5.txt"), true, false, false);
        setPermissions(new File("src/test/resources/permissions/b/file6.txt"), true, true, true);
        setPermissions(new File("src/test/resources/permissions/b/file7.txt"), true, true, true);
        // testFilePermissionsDifferentFilesEqualPermissions
        setPermissions(new File("src/test/resources/permissions/b/file8.txt"), true, true, false);
        // testFilePermissionsDifferentFilesDifferentPermissions
        setPermissions(new File("src/test/resources/permissions/b/file9.txt"), true, true, true);
        // testFilePermissionsSameFilesDifferentPermissionsExcludedPermDiff
        setPermissions(new File("src/test/resources/permissions/b/file10.txt"), true, false, false);
        setPermissions(new File("src/test/resources/permissions/b/file11.txt"), true, false, false);
        //   testFilePermissionsDifferentFilesDifferentPermissionsExcludedPermDiff
        setPermissions(new File("src/test/resources/permissions/a/file12.txt"), true, false, false);
        setPermissions(new File("src/test/resources/permissions/a/file13.txt"), true, false, false);

        prepareResults();
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    private static void setPermissions(File file, boolean read, boolean write, boolean execute) {
        file.setReadable(read, false);
        file.setWritable(write, false);
        file.setExecutable(execute, false);
    }

    @Test
    public void testFilePermissionsEqualFilesEqualPermissions() {
        final Artifact artifactFile1 = results.findArtifactByRelativePath("file1.txt");

        assertEquals("Equal files with equal permissions is not marked as SAME", Status.SAME, artifactFile1.getStatus());
        assertNull(artifactFile1.getPermissionDiff());
    }

    /**
     * One file is missing in folder B, other file is missing in folder A.
     */
    @Test
    public void testFilePermissionsMissingAddedFiles() {
        final Artifact artifactFile2 = results.findArtifactByRelativePath("file2.txt");
        final Artifact artifactFile3 = results.findArtifactByRelativePath("file3.txt");
        final Artifact artifactFile4 = results.findArtifactByRelativePath("file4.txt");

        assertNotEquals("Missing file is marked as changed", Status.DIFFERENT, artifactFile2.getStatus());
        assertNotEquals("Missing file is marked as changed", Status.DIFFERENT, artifactFile3.getStatus());
        assertNull(artifactFile4);

        //removed files have no permission difference
        assertNull(artifactFile2.getPermissionDiff());
        assertNull(artifactFile3.getPermissionDiff());

        assertTrue(results.isThereAnyErrorInResults());
        assertTrue(results.getArtifactsInError().contains(artifactFile2));
        assertTrue(results.getArtifactsInError().contains(artifactFile3));
        assertTrue(results.getArtifactsStringInError().contains(artifactFile2.getStatus() + ": " + artifactFile2.getRelativePath()));
        assertTrue(results.getArtifactsStringInError().contains(artifactFile3.getStatus() + ": " + artifactFile3.getRelativePath()));
    }

    @Test
    public void testFilePermissionsEqualFilesDifferentPermissions() {
        final Artifact artifactFile5 = results.findArtifactByRelativePath("file5.txt");
        final Artifact artifactFile6 = results.findArtifactByRelativePath("file6.txt");
        final Artifact artifactFile7 = results.findArtifactByRelativePath("file7.txt");

        assertEquals("No permission change detected", Status.DIFFERENT, artifactFile5.getStatus());
        assertNotNull(artifactFile5.getPermissionDiff());
        assertFalse(artifactFile5.getPermissionDiff().isEmpty());

        assertEquals("No permission change detected", Status.DIFFERENT, artifactFile6.getStatus());
        assertNotNull(artifactFile6.getPermissionDiff());
        assertFalse(artifactFile6.getPermissionDiff().isEmpty());

        assertEquals("No permission change detected", Status.DIFFERENT, artifactFile7.getStatus());
        assertNotNull(artifactFile7.getPermissionDiff());
        assertFalse(artifactFile7.getPermissionDiff().isEmpty());
    }

    @Test
    public void testFilePermissionsDifferentFilesEqualPermissions() {
        final Artifact artifactFile8 = results.findArtifactByRelativePath("file8.txt");

        assertEquals("Different files with equal permissions not marked as DIFFERENT", Status.DIFFERENT, artifactFile8.getStatus());
        assertNull(artifactFile8.getPermissionDiff());
    }

    @Test
    public void testFilePermissionsDifferentFilesDifferentPermissions() {
        final Artifact artifactFile9 = results.findArtifactByRelativePath("file9.txt");

        assertEquals("No permission change detected", Status.DIFFERENT, artifactFile9.getStatus());
        assertNotNull(artifactFile9.getPermissionDiff());
        assertFalse(artifactFile9.getPermissionDiff().isEmpty());
    }

    @Test
    public void testFilePermissionsSameFilesDifferentPermissionsExcludedPermDiff() {
        final Artifact artifactFile10 = results.findArtifactByRelativePath("file10.txt");
        final Artifact artifactFile11 = results.findArtifactByRelativePath("file11.txt");

        // As artifact changes are completely in 'expected changes' file, artifact should not be in the result as it has
        // been removed from the list.
        assertNull(artifactFile10);

        assertEquals("Expected status SAME as permission differences shall be excluded in this case", Status.SAME,
                artifactFile11.getStatus());
        assertNull(artifactFile11.getPermissionDiff());
    }

    @Test
    public void testFilePermissionsDifferentFilesDifferentPermissionsExcludedPermDiff() {
        final Artifact artifactFile12 = results.findArtifactByRelativePath("file12.txt");
        final Artifact artifactFile13 = results.findArtifactByRelativePath("file13.txt");

        // As artifact changes are completely in 'expected changes' file, artifact should not be in the result as it has
        // been removed from the list.
        assertNull(artifactFile12);

        assertEquals("Expected status DIFFERENT as only permission differences shall be excluded in this case",
                Status.DIFFERENT, artifactFile13.getStatus());
        assertNull(artifactFile13.getPermissionDiff());
    }

    @Ignore("workaround needed")
    @Test
    public void testFolderPermissionsChanged() {
        final Artifact artifactFolder = results.findArtifactByRelativePath("folder");

        assertNotNull("No permission change detected on folder", artifactFolder.getPermissionDiff());
        assertFalse("No permission change detected on folder", artifactFolder.getPermissionDiff().isEmpty());
        assertEquals("Incorrect folder state", Status.DIFFERENT, artifactFolder.getStatus());
        assertTrue(results.isThereAnyErrorInResults());
    }
}
